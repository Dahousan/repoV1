package com.allomed.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DoctorViewHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorViewHistoryAllPropertiesEquals(DoctorViewHistory expected, DoctorViewHistory actual) {
        assertDoctorViewHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertDoctorViewHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorViewHistoryAllUpdatablePropertiesEquals(DoctorViewHistory expected, DoctorViewHistory actual) {
        assertDoctorViewHistoryUpdatableFieldsEquals(expected, actual);
        assertDoctorViewHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorViewHistoryAutoGeneratedPropertiesEquals(DoctorViewHistory expected, DoctorViewHistory actual) {
        assertThat(actual)
            .as("Verify DoctorViewHistory auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorViewHistoryUpdatableFieldsEquals(DoctorViewHistory expected, DoctorViewHistory actual) {
        assertThat(actual)
            .as("Verify DoctorViewHistory relevant properties")
            .satisfies(a -> assertThat(a.getViewDate()).as("check viewDate").isEqualTo(expected.getViewDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorViewHistoryUpdatableRelationshipsEquals(DoctorViewHistory expected, DoctorViewHistory actual) {
        assertThat(actual)
            .as("Verify DoctorViewHistory relationships")
            .satisfies(a -> assertThat(a.getUser()).as("check user").isEqualTo(expected.getUser()))
            .satisfies(a -> assertThat(a.getDoctor()).as("check doctor").isEqualTo(expected.getDoctor()));
    }
}
