package com.allomed.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SymptomSearchRecommendationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSymptomSearchRecommendationAllPropertiesEquals(
        SymptomSearchRecommendation expected,
        SymptomSearchRecommendation actual
    ) {
        assertSymptomSearchRecommendationAutoGeneratedPropertiesEquals(expected, actual);
        assertSymptomSearchRecommendationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSymptomSearchRecommendationAllUpdatablePropertiesEquals(
        SymptomSearchRecommendation expected,
        SymptomSearchRecommendation actual
    ) {
        assertSymptomSearchRecommendationUpdatableFieldsEquals(expected, actual);
        assertSymptomSearchRecommendationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSymptomSearchRecommendationAutoGeneratedPropertiesEquals(
        SymptomSearchRecommendation expected,
        SymptomSearchRecommendation actual
    ) {
        assertThat(actual)
            .as("Verify SymptomSearchRecommendation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSymptomSearchRecommendationUpdatableFieldsEquals(
        SymptomSearchRecommendation expected,
        SymptomSearchRecommendation actual
    ) {
        assertThat(actual)
            .as("Verify SymptomSearchRecommendation relevant properties")
            .satisfies(a -> assertThat(a.getConfidenceScore()).as("check confidenceScore").isEqualTo(expected.getConfidenceScore()))
            .satisfies(a -> assertThat(a.getRank()).as("check rank").isEqualTo(expected.getRank()))
            .satisfies(a -> assertThat(a.getReasoning()).as("check reasoning").isEqualTo(expected.getReasoning()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSymptomSearchRecommendationUpdatableRelationshipsEquals(
        SymptomSearchRecommendation expected,
        SymptomSearchRecommendation actual
    ) {
        assertThat(actual)
            .as("Verify SymptomSearchRecommendation relationships")
            .satisfies(a -> assertThat(a.getSearch()).as("check search").isEqualTo(expected.getSearch()))
            .satisfies(a -> assertThat(a.getSpecialization()).as("check specialization").isEqualTo(expected.getSpecialization()));
    }
}
