package com.allomed.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DoctorDocumentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorDocumentAllPropertiesEquals(DoctorDocument expected, DoctorDocument actual) {
        assertDoctorDocumentAutoGeneratedPropertiesEquals(expected, actual);
        assertDoctorDocumentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorDocumentAllUpdatablePropertiesEquals(DoctorDocument expected, DoctorDocument actual) {
        assertDoctorDocumentUpdatableFieldsEquals(expected, actual);
        assertDoctorDocumentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorDocumentAutoGeneratedPropertiesEquals(DoctorDocument expected, DoctorDocument actual) {
        assertThat(actual)
            .as("Verify DoctorDocument auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorDocumentUpdatableFieldsEquals(DoctorDocument expected, DoctorDocument actual) {
        assertThat(actual)
            .as("Verify DoctorDocument relevant properties")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getFileName()).as("check fileName").isEqualTo(expected.getFileName()))
            .satisfies(a -> assertThat(a.getFileContent()).as("check fileContent").isEqualTo(expected.getFileContent()))
            .satisfies(a ->
                assertThat(a.getFileContentContentType())
                    .as("check fileContent contenty type")
                    .isEqualTo(expected.getFileContentContentType())
            )
            .satisfies(a -> assertThat(a.getUploadDate()).as("check uploadDate").isEqualTo(expected.getUploadDate()))
            .satisfies(a -> assertThat(a.getVerificationStatus()).as("check verificationStatus").isEqualTo(expected.getVerificationStatus())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorDocumentUpdatableRelationshipsEquals(DoctorDocument expected, DoctorDocument actual) {
        assertThat(actual)
            .as("Verify DoctorDocument relationships")
            .satisfies(a -> assertThat(a.getDoctor()).as("check doctor").isEqualTo(expected.getDoctor()));
    }
}
