package com.allomed.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppUserProfileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserProfileAllPropertiesEquals(AppUserProfile expected, AppUserProfile actual) {
        assertAppUserProfileAutoGeneratedPropertiesEquals(expected, actual);
        assertAppUserProfileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserProfileAllUpdatablePropertiesEquals(AppUserProfile expected, AppUserProfile actual) {
        assertAppUserProfileUpdatableFieldsEquals(expected, actual);
        assertAppUserProfileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertAppUserProfileMapsIdRelationshipPersistedValue(AppUserProfile entityToPersist, AppUserProfile persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getInternalUser().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserProfileAutoGeneratedPropertiesEquals(AppUserProfile expected, AppUserProfile actual) {
        assertThat(actual)
            .as("Verify AppUserProfile auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserProfileUpdatableFieldsEquals(AppUserProfile expected, AppUserProfile actual) {
        assertThat(actual)
            .as("Verify AppUserProfile relevant properties")
            .satisfies(a -> assertThat(a.getLatitude()).as("check latitude").isEqualTo(expected.getLatitude()))
            .satisfies(a -> assertThat(a.getLongitude()).as("check longitude").isEqualTo(expected.getLongitude()))
            .satisfies(a -> assertThat(a.getLastLoginIp()).as("check lastLoginIp").isEqualTo(expected.getLastLoginIp()))
            .satisfies(a -> assertThat(a.getLastUserAgent()).as("check lastUserAgent").isEqualTo(expected.getLastUserAgent()))
            .satisfies(a -> assertThat(a.getLastLoginDate()).as("check lastLoginDate").isEqualTo(expected.getLastLoginDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserProfileUpdatableRelationshipsEquals(AppUserProfile expected, AppUserProfile actual) {
        // empty method
    }
}
