package com.allomed.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DoctorProfileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorProfileAllPropertiesEquals(DoctorProfile expected, DoctorProfile actual) {
        assertDoctorProfileAutoGeneratedPropertiesEquals(expected, actual);
        assertDoctorProfileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorProfileAllUpdatablePropertiesEquals(DoctorProfile expected, DoctorProfile actual) {
        assertDoctorProfileUpdatableFieldsEquals(expected, actual);
        assertDoctorProfileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertDoctorProfileMapsIdRelationshipPersistedValue(DoctorProfile entityToPersist, DoctorProfile persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getInternalUser().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorProfileAutoGeneratedPropertiesEquals(DoctorProfile expected, DoctorProfile actual) {
        assertThat(actual)
            .as("Verify DoctorProfile auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorProfileUpdatableFieldsEquals(DoctorProfile expected, DoctorProfile actual) {
        assertThat(actual)
            .as("Verify DoctorProfile relevant properties")
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getOfficeAddress()).as("check officeAddress").isEqualTo(expected.getOfficeAddress()))
            .satisfies(a -> assertThat(a.getLatitude()).as("check latitude").isEqualTo(expected.getLatitude()))
            .satisfies(a -> assertThat(a.getLongitude()).as("check longitude").isEqualTo(expected.getLongitude()))
            .satisfies(a -> assertThat(a.getInpeCode()).as("check inpeCode").isEqualTo(expected.getInpeCode()))
            .satisfies(a -> assertThat(a.getIsVerified()).as("check isVerified").isEqualTo(expected.getIsVerified()))
            .satisfies(a -> assertThat(a.getLastLoginIp()).as("check lastLoginIp").isEqualTo(expected.getLastLoginIp()))
            .satisfies(a -> assertThat(a.getLastUserAgent()).as("check lastUserAgent").isEqualTo(expected.getLastUserAgent()))
            .satisfies(a -> assertThat(a.getLastLoginDate()).as("check lastLoginDate").isEqualTo(expected.getLastLoginDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorProfileUpdatableRelationshipsEquals(DoctorProfile expected, DoctorProfile actual) {
        assertThat(actual)
            .as("Verify DoctorProfile relationships")
            .satisfies(a -> assertThat(a.getSpecializations()).as("check specializations").isEqualTo(expected.getSpecializations()));
    }
}
